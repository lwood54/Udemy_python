##########################################
PASSWORDS:
##########################################

1. setup django project & app like normal.


2. >>>learningUsers/learningUsers/settings.py:
    
	INSTALLED_APPS = [
      
		'django.contrib.admin',  <--- make sure this is present
      
		'django.contrib.auth',   <--- make sure this is present
      
		'django.contrib.contenttypes',  <--- make sure this is present
      
		'django.contrib.sessions',
      
		'django.contrib.messages',
      		'django.contrib.staticfiles',
      
		'basicApp',   <--- don't forget to add additional apps!!!
    
		]


3. Make sure that any time you add something to "INSTALLED_APPS", you run:
  command line: python manage.py migrate



4. Always good to go ahead and:
  command line: python manage.py makemigrations basicApp



5. For Storing Passwords:
  ## NEVER STORE PASSWORDS as plain.txt file. Extremely vulnerable to hacking. ##
  
	NOTE: Django already has some very secure password storage algorithms, but I will be installing these:
    

command line: pip install bcrypt
    
command line: pip install django[argon2]
  make sure you are in the Virtual Environment: "MyDjangoEnv"



6. Now we need to make a list of the password hashers that we want to try. 
>>>learningUsers/learningUsers/settings.py:
  
	Good idea to keep password stuff together, so scroll down, then:

  
		PASSWORD_HASHERS = [
      
			'django.contrib.auth.hashers.Argon2PasswordHasher',
      			'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
      
			'django.contrib.auth.hashers.BCryptPasswordHasher',
      			'django.contrib.auth.hashers.PBKDF2PasswordHasher',
      
			'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',

  
			]
	
NOTE: When installing multiple hashers, like above, Django will try to use the hashers in order. If, for some reason, the top of the list doesn't work, then it will move on to the next one, and so on and so on. ALSO -- if you have users create 

passwords, then you try to migrate to another server that doesn't
have the correct hashers like bcrypt or argon2, etc. then it won't allow those users to login.

7. AUTH_PASSWORD_VALIDATORS: 
There are all kinds of options here, check the documentation. But one thing that can be don to use the options for password length for example.
 inside the list:
    

AUTH_PASSWORD_VALIDATORS = [ ...
    
			{
      'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
      			       'OPTIONS':{'min_length':9}  <---- ADD THIS CODE!!!
    }
   
			 ...
    ]



8. Setting up additional directory in oder to use static files and media files.
  
>>>learningUsers/learningUsers/settings.py:
    
	BASE_DIR = ......
    
	TEMPLATE_DIR = os.path.join(BASE_DIR,'templates') <--- ADD CODE

    

scroll down>>>
    TEMPLATES = [
      
				{
        ....
        
				'DIRS': [TEMPLATE_DIR,],
        
				....
      }

			  ]


9. make sure to:
  learningUsers/templates  <--- create directory for html files



10. create:
  learningUsers/static  <--- create directory for static files
          
	NOTE: static is for static files "I" provide



11. create:
  learningUsers/media   <--- create directory to store static media files
          
	NOTE: media is for static files the "USER" provides



12. >>>learningUsers/learningUsers/settings.py:
  
***Below TEMPLATE_DIR...
  
	STATIC_DIR = os.path.join(BASE_DIR,'static')
  
	MEDIA_DIR = os.path.join(BASE_DIR,'media')



13. Don't forget to add in a static files directory:
  
>>>learningUsers/learningUsers/settings.py: 
---scroll down...
    
STATIC_URL = '/static/' <-- already here
 
 STATICFILES_DIRS = [STATIC_DIR,] <--- ADD CODE!!!

    
# MEDIA
    
MEDIA_ROOT = MEDIA_DIR  <--- ADD CODE
 
 MEDIA_URL = '/media/'   <--- ADD CODE



14. >>>learningUsers/basicApp/models.py:
      
	from django.db import models  <--- should already be there
      
	from django.contrib.auth.models import User <--- ADD CODE!!!

      
	# Create Model
      
	class UserProfileInof(models.Model):

        
		user = models.OneToOneField(User) <--- need this to add more user attributes

       
 
	# additional classes to add user attributes

	portfolio_site = models.URLField(blank=True) <--- example of what you could add

        
	profile_pic = models.ImageField(upload_to='profile_pics',blank=True)

        

	# create a method to print out a model of the user profile
 
	def __str__(self):
              
		return self.user.username



15. IMPORTANT: If you are going to be working with images in Python, then you need to have an images library installed.

  
	command line: pip install pillow



16. create:
  learningUsers/basicApp/forms.py   <--- create file!!!



17. >>>learningUsers/basicApp/forms.py:
      
from django import forms
      
from django.contrib.auth.models import User
      
from basicApp.models import UserProfileInfo

      

class UserForm(forms.ModelForm):
        
	password = forms.CharField(widget=forms.Password())

        
	
	class Meta():
          
		model = User
          
		fields = ('username','email','password')

      

	class UserProfileInfoForm(forms.ModelForm):
        

		class Meta():
          
			model = UserProfileInfo
          
			fields = ('portfolio_site','profile_pic')



18. Now we must register the model we created to the admin, so if we log in as the admin, we can see the actual model.



19. >>>learningUsers/basicApp/admin.py:
      
from django.contrib import admin <--- should be there already
      
from basicApp.models import UserProfileInfo

      
admin.site.register(UserProfileInfo)



**Now, forms.py, models.py, and admin.py should be ready to go for the project. Then we will just need to connect all this with the .html pages.



20. NOTE: Whenever you edit admin.py or create a new model, remember to:
    
>>>command line: python manage.py migrate
    
>>>command line: python manage.py makemigrations basicApp
    
>>>command line: python manage.py migrate <--- AGAIN!!!




################
PART 2: Connecting the html
################



1. create:
  /learningUsers/templates/basicApp <--- new directory
  
/learningUsers/templates/basicApp/base.html <--- new
  /learningUsers/templates/basicApp/index.html <--- new
  
/learningUsers/templates/basicApp/registration.html <--- new
  /learningUsers/templates/basicApp/login.html <--- new



2. setup base.html which will have the layout for the project:
  
>>>
	learningUsers/templates/basicApp/base.html:

  
<!DOCTYPE html>
  
  <html>
    
    <head>
      
      <meta charset="utf-8">
      
        <title></title>
      
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    
    </head>
    
    <body>
      
      <nav class="navbar navbar-default navbar-static-top">
        
        <div class="container">
          
          <ul class="nav navbar-nav">
           
            <li><a class="navbar-brand" href="{% url 'index' %}">DJANGO</a></li>
            
            <li><a class="navbar-link" href="{% url 'admin:index' %}">Admin</a></li>
            
            <li><a class="navbar-link" href="{% url 'basicApp:register' %}">Register</a></li>
          
          </ul>
        
        </div>
      
      </nav>

      

      <div class="container">
        
        {% block body_block %}
        

        {% endblock %}
      
      </div>

          </body>
  
  </html>



3. setup the home page at the index.html file
  >>>learningUsers/templates/basicApp/index.html:

  {% extends "basicApp/base.html" %}
  {% block body_block %}

  <div class="jumbotron">
    <h1>Django Level Five</h1>
  </div>

  {% endblock %}



4. setup registration page
  
>>>
	learningUsers/templates/basicApp/registration.html:

  

{% extends 'basicApp/base.html' %}
  
{% load staticfiles %}

  
{% block body_block %}

  

<div class="jumbotron">
    
  {% if registered %}
      
    <h1>Thank you for registering!</h1>
    
  {% else %}
      
    <h1>Register Here!</h1>
      
    <h3>Fill out the form:</h3>

      
    <form enctype="multipart/form-data" method="POST">
        
      {% csrf_token %}

        {{ user_form.as_p }}

        {{ profile_form.as_p }}

        <input type="submit" name="" value="Register">


      </form>

    {% endif %}

  </div>



  {% endblock %}




5. edit the /learningUsers/learningUsers/urls.py file:

    from django.conf.urls import url,include
    from django.contrib import admin

    from basicApp import views

    
	urlpatterns = [

	        url(r'^$',views.index,name='index'),

	        url(r'^admin/', admin.site.urls),
	
        url(r'^basicApp/',include('basicApp.urls'))

	    ]



6. edit the app/urls.py file
  >>>learningUsers/basicApp/urls.py: <--- make sure to create file
      
from django.conf.urls import url

from basicApp import views


      # TEMPLATE URLS!
      
app_name = 'basicApp'

      

urlpatterns=[

          url(r'^register/$',views.register,name='register')

      ]



#################################

      USER REGISTRATION

#################################

7. >>>learningUsers/basicApp/views.py:



from django.shortcuts import render

from basicApp.forms import UserForm,UserProfileInfoForm

# Create your views here.
    
def index(request):
    return render(request,'basicApp/index.html')

def register(request):


    registered = False


    
    if request.method == "POST":
                  user_form = UserForm(data=request.POST)
        profile_form = UserProfileInfoForm(data=request.POST)

            
		
        if user_form.is_valid() and profile_form.is_valid():

            user = user_form.save()

            user.set_password(user.password)
                
            user.save()

  
              
            profile = profile_form.save(commit=False)
                
            profile.user = user

                

            if 'profile_pic' in request.FILES:

                      profile.profile_pic = request.FILES['profile_pic']



            profile.save()



            registered = True

        else:
 
            print(user_form.errors,profile_form.errors)
    

else:

        user_form = UserForm()

        profile_form = UserProfileInfoForm()



    return render(request,'basicApp/registration.html',
                                                  {'user_form':user_form,

                                                     'profile_form':profile_form,
                                  		             'registered':registered})




8. For good measure, go ahead and:
  >>>command line: python manage.py migrate
  >>>command line: python manage.py makemigrations basicApp
  >>>command line: python manage.py migrate



9. Then do a test run:
  >>>command line: python manage.py runserver

10. setup a superuser in to access admin:
  >>>command line: python manage.py createsuperuser
  >>>username: (I'm using "admin")
  >>>email address: lwood3499@gmail.com
  >>>password: the usual
  >>>password (again): same

11. python manage.py runserver and check out the users in admin.




#################################
    SETTING UP USER Login and Logout
#################################


1. We want one dedicated page for the user to login from.
  >>>learningUsers/learningUsers/settings.py:

  scroll down to below the "#Static files...."

  LOGIN_URL = '/basicApp/user_login'  <--- ADD CODE!!!



2. then we setup our html files, we will need to add a
    login and out link to the base.html file, as well as
    customizing the login.html page.

    >>>learningUsers/templates/basicApp/login.html:

        {% extends 'basicApp/base.html' %}
        {% block body_block %}

        <div class="jumbotron">
          <h1>Please Login</h1>
          <form action="{% url 'basicApp:user_login' %}" method="post">
            {% csrf_token %}
            <label for="username">Username:</label>
            <input type="text" name="username" placeholder="Enter Username">

            <label for="password">Password:</label>
            <input type="password" name="password">

            <input type="submit" name="" value="Login">
          </form>
        </div>

        {% endblock %}



##################################
ADDING LOGIC FOR LOGIN in views.py
##################################

3. Adding the bulk of the login logic to the views.py file.
    
NOTE: There will be a lot of imports since we will be using
 a lot of Django's built in functionality.

    NOTE: I will paste in all the code, even from earlier, but make
 a note of the new code for this section.

  
>>>learningUsers/basicApp/views.py:


  
from django.shortcuts import render
  
from basicApp.forms import UserForm,UserProfileInfoForm

  
# adding a lot of imports:
  
from django.contrib.auth import authenticate,login,logout   <--- ADD CODE!!!
  
from django.http import HttpResponseRedirect, HttpResponse  <--- ADD CODE!!!
  
from django.core.urlresolvers import reverse  <--- ADD CODE!!!
  
from django.contrib.auth.decorators import login_required <--- ADD CODE!!!
  
	NOTE: login_required is awesome because if you ever want a "view" to require
 that a user be logged in, then you can decorate it with the
        "login_required".

  
# Create your views here.
  
def index(request):
          return render(request,'basicApp/index.html')



##### ADD decorator to the function below to require login for that view

##### This can be done for any view function just by putting

##### the decorator just above the function.

  

@login_required   <--- ADD CODE!!!
  def special(request):   <--- ADD CODE!!!
      
    return HttpResponse("You are logged in, NICE!")   <--- ADD CODE!!!

  

@login_required   <--- ADD CODE!!!
  
def user_logout(request):   <--- ADD CODE!!!
      
    logout(request)  <--- ADD CODE!!!
      
    return HttpResponseRedirect(reverse('index'))   <--- ADD CODE!!!

  

def register(request):

      
    registered = False

      
    if request.method == "POST":
          user_form = UserForm(data=request.POST)
          profile_form = UserProfileInfoForm(data=request.POST)

          if user_form.is_valid() and profile_form.is_valid():

              user = user_form.save()
              user.set_password(user.password)
              user.save()

              profile = profile_form.save(commit=False)
              profile.user = user

              if 'profile_pic' in request.FILES:
                  profile.profile_pic = request.FILES['profile_pic']

              profile.save()

              registered = True
          else:
              print(user_form.errors,profile_form.errors)

      else:
          user_form = UserForm()
          profile_form = UserProfileInfoForm()

      return render(request,'basicApp/registration.html',
                              {'user_form':user_form,
                                'profile_form':profile_form,
                                'registered':registered})

NOTE: never use a name that is the same as an import name.
      So, instead of def login(request):, it's  def user_login(request):

def user_login(request):  <--- ADD CODE!!!
    if request.method == 'POST':  <--- ADD CODE!!!
          username = request.POST.get('username')   <--- ADD CODE!!!
          password = request.POST.get('password')   <--- ADD CODE!!!

          user = authenticate(username=username,password=password)    <--- ADD CODE!!!

          if user:  <--- ADD CODE!!!
              if user.is_active:  <--- ADD CODE!!!
                  login(request,user) <--- ADD CODE!!!
                  return HttpResponseRedirect(reverse('index')) <--- ADD CODE!!!

              else:   <--- ADD CODE!!!
                  return HttpResponse("ACCOUNT NOT ACTIVE")   <--- ADD CODE!!!

          else:   <--- ADD CODE!!!
              print("Someone tried to login and failed!")   <--- ADD CODE!!!
              print("Username: {} and password {}".format(username,password))   <--- ADD CODE!!!
              return HttpResponse("invalid login details supplied!")    <--- ADD CODE!!!

      else:   <--- ADD CODE!!!
          return render(request,'basicApp/login.html',{})   <--- ADD CODE!!!




############################
UPDATING the urls.py files
############################


4. >>> learningUsers/learningUsers/urls.py:

      from django.conf.urls import url,include
      from django.contrib import admin
      from basicApp import views

      urlpatterns = [
          url(r'^$',views.index,name='index'),
          url(r'^admin/', admin.site.urls),
          url(r'^basicApp/',include('basicApp.urls')),
          url(r'^logout/$',views.user_logout,name='logout'),  <--- ADD CODE!!!
          url(r'^special/',views.special,name='special'),   <--- ADD CODE!!!
          # DID HE MISS THE ^ above? or is this not needed, error?
          ##############
      ]



5. >>>learningUsers/basicApp/urls.py:

      from django.conf.urls import url
      from basicApp import views

      # TEMPLATE URLS!
      app_name = 'basicApp'

      urlpatterns=[
          url(r'^register/$',views.register,name='register'),
          url(r'^user_login/$',views.user_login,name='user_login'),   <--- ADD CODE!!!
      ]



6. Go back to base.html and add logic to have the user either login
    or logout once they are registered.

    >>>learningUsers/templates/basicApp/base.html:

      SNIPPET FROM THE base.html:

      <div class="container">
        <ul class="nav navbar-nav">
          <li><a class="navbar-brand" href="{% url 'index' %}">DJANGO</a></li>
          <li><a class="navbar-link" href="{% url 'admin:index' %}">Admin</a></li>
          <li><a class="navbar-link" href="{% url 'basicApp:register' %}">Register</a></li>

ADD CODE!!! ---> {% if user.is_authenticated %}
ADD CODE!!! --->   <li><a class="navbar-link" href="{% url 'logout' %}">Logout</a></li>
ADD CODE!!! ---> {% else %}
ADD CODE!!! --->   <li><a class="navbar-link" href="{% url 'basicApp:user_login' %}">Login</a></li>
ADD CODE!!! ---> {% endif %}

        </ul>
      </div>



7. good measure migrate sequence:
  >>>command line: python manage.py migrate
  >>>command line: python manage.py makemigrations basicApp
  >>>command line: python manage.py migrate
  >>>command line: python manage.py runserver

8. It all works!!! Pretty freaking awesome.
    CHALLENGE:
    Try to link that "special" page that requires a login to view.
